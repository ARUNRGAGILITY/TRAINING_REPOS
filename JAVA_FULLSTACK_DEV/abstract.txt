Java abstraction is a fundamental object-oriented programming concept that means hiding implementation details while showing only essential features to the user.
Core Meaning
Abstraction = "What" without "How"

Shows what an object can do (methods/functionality)
Hides how it actually does it (internal implementation)

Real-World Analogy
Think of a car:

You know you can start it, accelerate, brake, and steer
You don't need to know how the engine works internally
The steering wheel, pedals, and gear shift are the "abstract interface"

In Java Programming
Abstraction focuses on:

What methods are available
What those methods do
Not how they're implemented internally


// Abstract class representing a car
abstract class Car {
    protected String brand;
    protected boolean isEngineOn;
    protected int speed;
    
    public Car(String brand) {
        this.brand = brand;
        this.isEngineOn = false;
        this.speed = 0;
    }
    
    // Abstract methods - each car type implements differently
    public abstract void startEngine();
    public abstract void accelerate();
    public abstract void brake();
    
    // Concrete methods - common for all cars
    public void turnOn() {
        startEngine();
        System.out.println(brand + " is ready to drive");
    }
    
    public void stop() {
        speed = 0;
        isEngineOn = false;
        System.out.println(brand + " has stopped and engine is off");
    }
    
    public void honk() {
        System.out.println(brand + " goes BEEP BEEP!");
    }
    
    public int getSpeed() {
        return speed;
    }
    
    public String getBrand() {
        return brand;
    }
}

// Concrete implementation - Manual Car
class ManualCar extends Car {
    private int gear;
    
    public ManualCar(String brand) {
        super(brand);
        this.gear = 0;
    }
    
    @Override
    public void startEngine() {
        isEngineOn = true;
        System.out.println(brand + " manual engine started - clutch pressed, key turned");
    }
    
    @Override
    public void accelerate() {
        if (isEngineOn) {
            gear++;
            speed += 10;
            System.out.println(brand + " accelerating - shifted to gear " + gear + ", speed: " + speed + " km/h");
        } else {
            System.out.println("Start the engine first!");
        }
    }
    
    @Override
    public void brake() {
        if (speed > 0) {
            speed -= 15;
            if (speed < 0) speed = 0;
            System.out.println(brand + " braking with clutch - speed: " + speed + " km/h");
        }
    }
}

// Concrete implementation - Automatic Car
class AutomaticCar extends Car {
    
    public AutomaticCar(String brand) {
        super(brand);
    }
    
    @Override
    public void startEngine() {
        isEngineOn = true;
        System.out.println(brand + " automatic engine started - just press the button!");
    }
    
    @Override
    public void accelerate() {
        if (isEngineOn) {
            speed += 12;
            System.out.println(brand + " accelerating smoothly - automatic transmission, speed: " + speed + " km/h");
        } else {
            System.out.println("Start the engine first!");
        }
    }
    
    @Override
    public void brake() {
        if (speed > 0) {
            speed -= 10;
            if (speed < 0) speed = 0;
            System.out.println(brand + " smooth automatic braking - speed: " + speed + " km/h");
        }
    }
}

// Concrete implementation - Electric Car
class ElectricCar extends Car {
    private int batteryLevel;
    
    public ElectricCar(String brand) {
        super(brand);
        this.batteryLevel = 100;
    }
    
    @Override
    public void startEngine() {
        if (batteryLevel > 0) {
            isEngineOn = true;
            System.out.println(brand + " electric motor activated silently - battery: " + batteryLevel + "%");
        } else {
            System.out.println("Battery dead! Need to charge first.");
        }
    }
    
    @Override
    public void accelerate() {
        if (isEngineOn && batteryLevel > 0) {
            speed += 15;
            batteryLevel -= 2;
            System.out.println(brand + " instant electric acceleration - speed: " + speed + " km/h, battery: " + batteryLevel + "%");
        } else {
            System.out.println("Check engine and battery!");
        }
    }
    
    @Override
    public void brake() {
        if (speed > 0) {
            speed -= 8;
            batteryLevel += 1; // Regenerative braking
            if (speed < 0) speed = 0;
            if (batteryLevel > 100) batteryLevel = 100;
            System.out.println(brand + " regenerative braking - speed: " + speed + " km/h, battery: " + batteryLevel + "%");
        }
    }
}

// Driver class - shows abstraction in action
public class CarAbstractionDemo {
    public static void main(String[] args) {
        System.out.println("=== Car Abstraction Demo ===\n");
        
        // Create different types of cars
        Car manualCar = new ManualCar("Honda Civic");
        Car automaticCar = new AutomaticCar("Toyota Camry");
        Car electricCar = new ElectricCar("Tesla Model 3");
        
        // Driver doesn't need to know HOW each car works internally
        // Same interface for all cars!
        Car[] cars = {manualCar, automaticCar, electricCar};
        
        for (Car car : cars) {
            System.out.println("\n--- Driving " + car.getBrand() + " ---");
            
            // Same method calls work for all car types
            car.turnOn();
            car.accelerate();
            car.accelerate();
            car.honk();
            car.brake();
            car.stop();
        }
        
        System.out.println("\n=== Individual Car Features ===");
        
        // Each car handles the same actions differently
        System.out.println("\nTesting acceleration differences:");
        manualCar.turnOn();
        automaticCar.turnOn();
        electricCar.turnOn();
        
        System.out.println("\nAll cars accelerate (but differently):");
        manualCar.accelerate();
        automaticCar.accelerate();
        electricCar.accelerate();
    }
}
